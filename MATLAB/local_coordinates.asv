function [outputArg1,outputArg2] = local_coordinates(x_0,y_0,z_0,x_s,y_s,z_s)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Geoinformatics Project - Positioning and Location Based Services
% A.A. 2023/2024
% 
% Input:
% t         --> vector of times
% t_0       --> starting time 
% t_end     --> ending time 
% D_t       --> time discretization step 
% r         --> orbit radius
% o_i       --> orbit inclination 
% M0        --> mean anomaly
% Omega0    --> starting rigth ascension of the ascending node 
%
% Output: 
% ITRF_geod --> coordinates of the point of interest in ITRF geodethic 
%   
% This function converts the coordinates of a point from the Orbital
% Reference System to the ITRF geodethic.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Initialize vector of epochs
    t_0 = 0; %[sec]
    t_end = 24*3600; %[sec]
    D_t = 1; %[sec]
    t = t_0:D_t:t_end;

    % Convert point coordinates from cartesian to geodetic
    [phi_0,lambda_0,h_0] = Cart2Geod(x_0,y_0,z_0);

    R = [-sin(lambda_0) cos(lambda_0) 0; -sin(phi_0)*cos(lambda_0) -sin(phi_0)*sin(lambda_0) cos(phi_0); cos(phi_0)*cos(lambda_0) cos(phi_0)*sin(lambda_0) sin(phi_0)];

    % Initialize vector of positions
    loc_coords = zeros(length(x_s),3);

    % Fill the previous vectors
    for i = 1 : length(x_s) 
        
        dx = [x_s(i)-x_0; y_s(i)-y_0; z_s(i)-z_0];
        loc_coords(i)
        

    end

    ORS = [x_t' y_t' zeros(length(t), 1)]; % axis z is 0 because the orbital plane
                                           % lays on the x,y plane
    
    % Fill the three rotation matrices and rotate from ORS to ITRF
    
    ITRF = zeros(length(t), 3);
    ITRF_geod = zeros(length(t), 3);
   
    for i = 1:length(t)
        
        R1 = [1 0 0 ; 0 cos(o_i*pi/180) -sin(o_i*pi/180); 0 sin(o_i*pi/180) cos(o_i*pi/180)];    % o_i = OrbitInclination
        R31 = [cos(W(i)) -sin(W(i)) 0; sin(W(i)) cos(W(i)) 0; 0 0 1];
        R32 = [1 0 0; 0 1 0; 0 0 1];
        R = R31*R1*R32;
 
        X_ORS = ORS(i, :);
        X_ITRF = R*X_ORS';
        ITRF(i,:) = X_ITRF;
    
        % From global Cartesian to Geodetic 
        [lat, lon, h] = Cart2Geod(X_ITRF(1),X_ITRF(2),X_ITRF(3));
        
        % From radiants to degrees
        lat = lat*180/pi;
        lon = lon*180/pi;

        % Rephase latitude in [-90;90] interval
        if lat > 90
           lat = lat - 180;
        end

        if lat < -90
           lat = lat + 180;
        end

        ITRF_geod(i, :) = [lat, lon, h];
        
    end 

end