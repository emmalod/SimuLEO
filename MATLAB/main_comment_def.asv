%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Geoinformatics Project - Positioning and Location Based Services
% A.A. 2023/2024
%
% SimuLEO
% 
% Angelica Iseni, Emma Lodetti
% 
% References:
%    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear
close all
clc

set(0,'DefaultFigureWindowStyle','docked');

%% 0. Initialize vector of epochs 
t_0 = 0; %[sec]
t_end = 24*3600; %[sec]
D_t = 1; %[sec]
t = [t_0:D_t:t_end];

%% Ciclo for

% Define the folder path where your text files are located
InputFolderPath = 'C:\Users\emmal\Documents\GitHub\SimuLEO\Almanacs040444';
OutputFolderPath = 'C:\Users\emmal\Documents\GitHub\SimuLEO\SatellitePositions040444';
%mkdir OutputFolderPath

% List all files in the folder
files = dir(fullfile(InputFolderPath, '*.txt'));

% Loop through each file in the folder
for i = 1:length(files)
    % Get the file name
    InputFileName = files(i).name;
    
    % Create the full file path
    InputFilePath = fullfile(InputFolderPath, InputFileName);
    
    [ITRF_geod] = ITRF_positions(t,t_0,t_end,D_t,OrbitRadius,OrbitInclination,M0,Omega0)
    [OrbitRadius,OrbitInclination,M0,Omega0] = ReadData(InputFilePath);
    [ITRF_geod] = ITRF_positions(t,t_0,t_end,D_t,OrbitRadius,OrbitInclination,M0,Omega0);
    SavePositions(ITRF_geod, InputFileName, OutputFolderPath);

end


%% output

% Define the folder path where you want to save the output files
outputFolderPath = 'C:\Users\YourUsername\Documents\SatellitePositions'; % Update this with your desired folder path

% Loop through each satellite data
for i = 1:length(satelliteData)
    % Extract satellite information
    satelliteName = satelliteData(i).SatelliteName;
    % Assuming you have calculated the position matrix for each second of a day and stored it in a variable called 'positionMatrix'
    
    % Define the file name for the output text file
    fileName = strcat(satelliteName, '.txt');
    
    % Create the full file path
    filePath = fullfile(outputFolderPath, fileName);
    
    % Save the position matrix to a text file
    dlmwrite(filePath, positionMatrix, 'delimiter', '\t');
end


%% 4. Plot satellite's daily trajectory with basemap
figure(1);

% H = subplot(m,n,p), or subplot(mnp), breaks the Figure window
% into an m-by-n matrix of small axes

% Plot groundtracks
subplot(3,1,1:2);
% axesm Define map axes and set map properties
ax = axesm ('eqdcylin', 'Frame', 'on', 'Grid', 'on', 'LabelUnits', 'degrees', 'MeridianLabel', 'on', 'ParallelLabel', 'on', 'MLabelParallel', 'south');
% geoshow Display map latitude and longitude data 
%  DISPLAYTYPE can be 'point', 'line', or 'polygon' and defaults to 'line'
geoshow('landareas.shp', 'FaceColor', 'black');
hold on
geoshow(ITRF_geod(:,1)*180/pi,ITRF_geod(:,2)*180/pi, 'DisplayType', 'point', 'MarkerEdgeColor', 'green');
% axis EQUAL  sets the aspect ratio so that equal tick mark
% increments on the x-,y- and z-axis are equal in size.
% axis TIGHT  sets the axis limits to the range of the data.
axis equal; axis tight;

% Plot height of the satellite 
subplot(3,1,3);
plot(t,(ITRF_geod(:,3)-mean(ITRF_geod(:,3)))*1e-3, '.g');
title(['ellipsoidic height variations [km] around mean height = ',num2str(mean(ITRF_geod(:,3))*1e-3),' km']);
xlabel('seconds in one day (00:00 - 23:59 = 86400 sec)');
ylabel('[km]');
xlim([1 t(end)]);

%Print results on a file
fid = fopen('GPS_KeplerianOrbit_6parameters.txt','w');

fprintf(fid,'EXPORT FROM MATLAB: GPS_orbit_est.m \n\n');
fprintf(fid,' * Coordinates ORS (xF, yF) || Coordinates ITRF (x, y, z) || Coordinates phi, lambda, h ell\n\n');
for i = 1 : length(Dt)
    fprintf(fid, ' %15.6f  %15.6f %15.6f || %15.6f  %15.6f  %15.6f || %15.6f  %15.6f  %15.6f \n',lat,lon,h);
end
fprintf(fid, '\n');


fclose(fid);        %or fclose('all');

save solution2.mat




  

    